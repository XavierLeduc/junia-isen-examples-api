#Crédit : Louis SKRZYPCZAK pour le partage de code.     

name: Cloud_Project_ElLel_XaLed_EmCor #Identification du workflow dans GitHub Actions

on: 
    pull_request: #Déclenchement du Workflow lors d'une pull requests sur les branches suivantes : 
        branches: [ "main", "Xavier", "Emile", "eliot" ] 
        types: [opened, synchronize] #Types d'évènements surveillés : opened (new pull request) et synchronize (MAJ d'une pull request)
    push: #Déclenchement du Workflow lors d'un push sur les branches suivantes : 
        branches: 
            - main
            - eliot
            - Xavier
            - Emile 

env: 
    REGISTRY: ghcr.io #Adresse du registre Docker (GitHub Container Registry)
    IMAGE_NAME: ${{ github.repository }} #Nom de l'img Docker, automatiquement dérivé du dépot Git

permissions: #Accord de perm, ici capable de lire et publier (une image Docker par ex) sur le dépôt
    contents: read
    packages: write 

jobs: 
    check_service: #Test l'appli lors des Pull Requests et des push + exécute des tests
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/eliot' || github.ref == 'refs/heads/Xavier' || github.ref == 'refs/heads/Emile'
        runs-on: ubuntu-latest #Utilise une VM Ubuntu pour exécuter (par défaut)
        steps: 
            - uses: actions/checkout@v4 #Télécharge le contenu du dépot
            - uses: actions/setup-python@v4 #Installe la version de Python utilisé dans le projet
              with:
                python-version: "3.12"
            - uses: yezz123/setup-uv@v4 #Utilise l'outil UV et vérifie son installation
            - run: uv --version
            - name: Install dependencies #Installe toutes les dép spécifiées dans uv.lock
              run: uv sync
            - name: Build Project #Compile le projet
              run: uv build
            - name: Running unit tests #Lance les tests situées dans ".tests/" avec pytest
              run: uv run pytest tests/

    build_docker_image: #Construit une image Docker et publie sur GHCR 
            if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/eliot' || github.ref == 'refs/heads/Xavier' || github.ref == 'refs/heads/Emile' 
            runs-on: ubuntu-latest #uniquement sur main pour l'instant, utilisation d'ubuntu
            steps: 
                - name: Checkout repository #DL le code du dépôt
                  uses: actions/checkout@v3

                - name: Log in to the Container registry #Se connecte à GitHub Packages
                  uses: docker/login-action@v2    
                  with:
                    registry: ${{ env.REGISTRY }}
                    username: ${{ github.actor }}
                    password: ${{ secrets.GITHUB_TOKEN }}

                - name: Extract metadata (tags, labels) for Docker 
                  id: meta
                  uses: docker/metadata-action@v3
                  with:
                      images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                      tags: | #Associe un tag à  la branche, chaque IMG unique avec le SHA, tag "latest" pour la version la + récente
                        type=ref,event=branch 
                        type=sha
                        type=raw,value=latest

                - name: Build and push Docker image #Construit et publie l'image docker
                  uses: docker/build-push-action@v4 
                  with:
                        context: .  #On vient chercher à la racine
                        push: true
                        tags: ${{ steps.meta.outputs.tags }}
                        labels: ${{ steps.meta.outputs.labels }}

                    #Maybe we'll have to perform terraform plan and apply here 
                    #to deploy the infrastructure on the cloud

    deploy_application: # Nouveau job pour le déploiement
        name: Deploy application with Terraform
        needs: build_docker_image # Dépend du job précédent
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Login to Azure
              uses: azure/login@v1
              with: 
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.9.8 # Version de Terraform

            - name: Initialize Terraform
              working-directory: ./infrastructure
              run: terraform init

            - name: Plan Terraform changes
              working-directory: ./infrastructure
              run: terraform plan -var "docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"

            - name: Apply Terraform changes
              working-directory: ./infrastructure
              run: terraform apply -auto-approve -var "docker_image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"



