#Crédit : Louis SKRZYPCZAK pour le partage de code.     

name: Cloud_Project_ElLel_XaLed_EmCor #Identification du workflow dans GitHub Actions

on: 
    pull_request: #Déclenchement du Workflow lors d'une pull request sur les branches suivantes : 
        branches: [ "main", "Xavier", "Emile", "eliot" ] 
        types: [opened, synchronize] #Types d'évènements surveillés : opened (new pull request) et synchronize (MAJ d'une pull request)
    push: #Déclenchement du Workflow lors d'un push sur les branches suivantes : 
        branches: 
            - main
            - eliot
            - Xavier
            - Emile 

env: 
    REGISTRY: ghcr.io #Adresse du registre Docker (GitHub Container Registry)
    IMAGE_NAME: ${{ github.repository }} #Nom de l'image Docker, automatiquement dérivé du dépôt Git

permissions: #Accord de permissions pour lire et publier (une image Docker par ex) sur le dépôt
    contents: read
    packages: write 

jobs: 
    check_service: #Test de l'application lors des Pull Requests et des push + exécution des tests
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/eliot' || github.ref == 'refs/heads/Xavier' || github.ref == 'refs/heads/Emile'
        runs-on: ubuntu-latest #Utilise une VM Ubuntu pour exécuter (par défaut)
        steps: 
            - uses: actions/checkout@v4 #Télécharge le contenu du dépôt
            - uses: actions/setup-python@v4 #Installe la version de Python utilisée dans le projet
              with:
                python-version: "3.12"
            - uses: yezz123/setup-uv@v4 #Utilise l'outil UV et vérifie son installation
            - run: uv --version
            - name: Install dependencies #Installe toutes les dépendances spécifiées dans uv.lock
              run: uv sync
            - name: Build Project #Compile le projet
              run: uv build
            - name: Running unit tests #Lance les tests situés dans ".tests/" avec pytest
              run: uv run pytest tests/

    build_docker_image: #Construit une image Docker et publie sur Git
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/eliot' || github.ref == 'refs/heads/Xavier' || github.ref == 'refs/heads/Emile' 
        runs-on: ubuntu-latest #Utilisation d'ubuntu-latest
        steps: 
            - name: Checkout repository #Télécharge le code du dépôt
              uses: actions/checkout@v3

            - name: Log in to the Container registry #Connexion à GitHub Packages avec le compte de l'utilisateur
              uses: docker/login-action@v2    
              with:
                registry: ${{ env.REGISTRY }}
                username: ${{ github.actor }}
                password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker 
              id: meta
              uses: docker/metadata-action@v3
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: | #Associe un tag à la branche, chaque image unique avec le tag "latest" pour la version la plus récente
                    type=ref,event=branch 
                    type=sha
                    type=raw,value=latest

            - name: Build and push Docker image #Construit et publie l'image Docker
              uses: docker/build-push-action@v4 
              with:
                    context: .  #Racine du projet
                    push: true
                    tags: ${{ steps.meta.outputs.tags }}
                    labels: ${{ steps.meta.outputs.labels }}

    deploy_application: # Nouveau job pour le déploiement de l'appli avec la nouvelle version de l'IMG
        name: Deploy application with Terraform
        needs: build_docker_image # Dépend du job précédent
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Login to Azure #Auth à Azure avec les id persos stockés dans "SECRETS"
              uses: azure/login@v1
              with: 
                creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Debug secrets #Vérif des variables Azure
              run: |
                echo "Checking AZURE_CREDENTIALS"
                echo "Extracted AZURE_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')"
                echo "Extracted AZURE_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')"
                echo "Extracted AZURE_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')"

            - name: Assign necessary permissions #Donne les permissions nécessaires à Azure
              run: |
                az role assignment create \
                  --assignee $(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId') \
                  --role "Owner" \
                  --scope /subscriptions/$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')

            - name: Setup Terraform   #Utilisation de Terraform pour init, plan et apply
              uses: hashicorp/setup-terraform@v2
              with:
                terraform_version: 1.9.8 # Version de Terraform

            - name: Convert image name to lowercase #Nécessaires pour les registres Docker
              run: echo "DOCKER_IMAGE=${{ env.REGISTRY }}/$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]'):latest" >> $GITHUB_ENV

            - name: Initialize Terraform
              working-directory: ./infrastructure
              run: terraform init

            - name: Plan Terraform changes
              working-directory: ./infrastructure
              run: terraform plan -var "docker_image=$DOCKER_IMAGE"

            - name: Apply Terraform changes
              working-directory: ./infrastructure
              run: terraform apply -auto-approve -var "docker_image=$DOCKER_IMAGE"
